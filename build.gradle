plugins {
    id 'java-library'
    id 'application'
    id 'io.qameta.allure' version '2.8.1'
}

version '1.0-SNAPSHOT'

group 'Arrival.com'
version '1.0'

repositories {
    maven {url = "https://dl.bintray.com/qameta/maven-unstable/"}
    mavenCentral()
}

compileTestJava {
    options.encoding = 'UTF-8'
}
def allureVersion = "2.13.8",
    selenideVersion = "5.19.0",
    junitVersion = "5.7.1"

allure {
    version = "${allureVersion}"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "${allureVersion}"
    }
}

dependencies {
    implementation(
            "org.aeonbits.owner:owner:1.0.12")

    testImplementation (
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "org.hamcrest:hamcrest-all:1.3",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.junit.jupiter:junit-jupiter-params:$junitVersion",
            "io.qameta.allure:allure-ee-junit-platform:3.28.2",
            "org.assertj:assertj-core:3.19.0",
            "org.slf4j:slf4j-simple:1.7.29",
            "org.aspectj:aspectjweaver:1.9.5",
            "com.codeborne:pdf-test:1.5.1")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

}


tasks.withType(Test) {
    systemProperties += System.properties
    System.setProperty("chromeoptions.prefs", "intl.accept_languages=en")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "failed"
//            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
}

task functional_test(type: Test) {
    useJUnitPlatform {
        includeTags 'functional'
    }
}